# üìò Tech Stack Comparison: Python vs TypeScript for CI/CD Scan Trigger API Project

## üîß Project Background

This project provides an API backend to trigger Jenkins-based scanning pipelines (FOSS, SAST, DAST, etc.), collect real-time status and logs, store results (e.g., report URLs), and expose them via REST and/or GraphQL. It requires:
- Easy maintenance
- Developer-friendly APIs
- Oracle DB support
- Workflow engine integration (e.g., Temporal)
- Secure API authentication (e.g., API Key)

---

## üêç Python Tech Stack (Option A)

| Component        | Technology             |
|------------------|-------------------------|
| Web Framework    | FastAPI                 |
| ORM              | SQLAlchemy + cx_Oracle  |
| Typing & Schema  | Pydantic                |
| Unit Testing     | pytest                  |
| Workflow Engine  | Temporal Python SDK / Prefect / Argo (via API) |
| Docs & Debugging | Swagger UI / ReDoc (auto from FastAPI) |
| CI/CD Trigger    | requests or python-jenkins |
| Containerization | Docker + docker-compose |

---

## üü¶ TypeScript Tech Stack (Option B)

| Component        | Technology             |
|------------------|-------------------------|
| Web Framework    | NestJS (modular + decorator-based) |
| ORM              | TypeORM / Prisma        |
| Typing & Schema  | TypeScript (static types) |
| GraphQL Support  | Apollo Server (built-in with NestJS) |
| Unit Testing     | Jest                    |
| Workflow Engine  | Temporal Node SDK / Argo |
| Docs & Debugging | Swagger + GraphQL Playground |
| CI/CD Trigger    | axios / node-jenkins-api |
| Containerization | Docker + docker-compose |

---

## üìä Comparison Table

| Feature                     | Python (FastAPI)                      | TypeScript (NestJS + Apollo)             |
|-----------------------------|---------------------------------------|------------------------------------------|
| Ease of Adoption            | ‚úÖ Very beginner-friendly              | ‚ö†Ô∏è Requires understanding of TS, DI, modules |
| Developer Productivity      | ‚úÖ Fast dev speed, fewer files         | ‚ö†Ô∏è Slower setup, better for large teams   |
| Typing                      | ‚ö†Ô∏è Runtime via Pydantic                | ‚úÖ Compile-time via TypeScript            |
| REST API Support            | ‚úÖ Native & auto-documented            | ‚úÖ Strong REST support                    |
| GraphQL Support             | ‚ö†Ô∏è Needs extra lib (Strawberry, etc.) | ‚úÖ First-class support with Apollo        |
| Oracle Compatibility        | ‚úÖ Mature (cx_Oracle)                  | ‚ö†Ô∏è Prisma support still in progress       |
| Workflow Engine Integration | ‚úÖ Prefect, Temporal (Python SDK)      | ‚úÖ Temporal (official Node SDK)           |
| API Documentation           | ‚úÖ Auto Swagger/Redoc                  | ‚úÖ Swagger + GraphQL playground           |
| API Contract Sharing        | ‚ö†Ô∏è Manual via OpenAPI schema           | ‚úÖ TS types can be shared across FE/BE    |
| Maintenance                 | ‚úÖ Simple and modular                  | ‚úÖ Modular, better for long-term scaling  |
| Team Fit                    | ‚úÖ Ideal for Python-first small teams  | ‚ö†Ô∏è Ideal for TS-first fullstack teams     |

---

## ‚úÖ Recommendation

| Option        | When to Choose                                                                 |
|---------------|---------------------------------------------------------------------------------|
| **Python A**  | ‚úÖ Choose if your team is small, Python-savvy, and you prioritize fast delivery |
| **TS B**      | ‚ö†Ô∏è Choose if you're planning for front-end type sharing and GraphQL-heavy APIs |

---

## üîú Next Steps

- [ ] Choose preferred stack
- [ ] Set up initial repo with Docker + compose
- [ ] Scaffold REST/GraphQL endpoints
- [ ] Define security (e.g., API key auth)
- [ ] Integrate Jenkins trigger and callback APIs
- [ ] Extend with workflow engine if needed

